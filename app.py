import gradio as gr
from transformers import AutoTokenizer, TFAutoModelForSequenceClassification
import tensorflow as tf

# Load BERT model
def load_models():
    models = {}
    try:
        models['BERT'] = {
            'model': TFAutoModelForSequenceClassification.from_pretrained("layers2024/bert-sentiment"),
            'tokenizer': AutoTokenizer.from_pretrained("neuralmind/bert-base-portuguese-cased")
        }
        print("‚úì BERT loaded")
    except Exception as e:
        print(f"‚ö†Ô∏è Error loading BERT model: {str(e)}")
    
    return models

# Exemplos de avalia√ß√µes para teste
EXAMPLES = [
    # Avalia√ß√µes Positivas (nota 5)
    "Produto excelente! Entrega r√°pida e qualidade √≥tima. Recomendo!",
    "√ìtimo atendimento, produto bem embalado e conforme descrito.",
    "Entrega antes do prazo. Produto de qualidade e pre√ßo justo.",
    "Muito satisfeito! Produto original e entrega r√°pida.",
    "Produto perfeito, bem embalado. Vendedor confi√°vel.",
    
    # Avalia√ß√µes Negativas (nota 1)
    "Produto de baixa qualidade. N√£o recomendo.",
    "Veio com defeito e sem suporte do vendedor.",
    "Atrasou muito e veio diferente do anunciado.",
    "Faltaram itens na entrega. Sem retorno do vendedor.",
    "Produto muito ruim. N√£o funciona!"
]

def get_prediction(text, model_dict):
    inputs = model_dict['tokenizer'](text, return_tensors="tf", truncation=True, padding=True)
    outputs = model_dict['model'](**inputs)
    probabilities = tf.nn.softmax(outputs.logits, axis=-1)
    probs = probabilities.numpy()[0]
    predicted_class = tf.math.argmax(probabilities, axis=-1).numpy()[0]
    confidence = probs[predicted_class]
    return predicted_class, confidence

def predict_sentiment(review_text):
    # Definir threshold de confian√ßa
    HIGH_CONFIDENCE = 0.90  # 80% de confian√ßa m√≠nima para classifica√ß√£o definitiva
    
    try:
        predicted_class, confidence = get_prediction(review_text, MODELS['BERT'])
        
        # Determinar o sentimento baseado no threshold
        if confidence >= HIGH_CONFIDENCE:
            sentiment = "POSITIVO" if predicted_class == 1 else "NEGATIVO"
            status = "‚úÖ Alta confian√ßa"
        else:
            if predicted_class == 1:
                sentiment = "POSSIVELMENTE POSITIVO"
            else:
                sentiment = "POSSIVELMENTE NEGATIVO"
            status = "‚ö†Ô∏è Baixa confian√ßa"
        
        return f"BERT:\n{sentiment}\n{status}\nConfian√ßa: {confidence:.1%}"
            
    except Exception as e:
        return f"‚ö†Ô∏è Erro: {str(e)}"

# Load all models
print("Carregando modelos...")
MODELS = load_models()
print("Modelos carregados!")

# Create the Gradio interface
interface = gr.Interface(
    fn=predict_sentiment,
    inputs=[
        gr.Textbox(
            label="Texto da Avalia√ß√£o",
            placeholder="Digite aqui a avalia√ß√£o do produto...",
            lines=4
        )
    ],
    examples=[[ex] for ex in EXAMPLES],
    outputs=gr.Textbox(label="Resultados da An√°lise"),
    title="üéØ An√°lise de Sentimento em Avalia√ß√µes",
    description='''### An√°lise de Sentimento com BERT

Este sistema analisa o sentimento em avalia√ß√µes de produtos em portugu√™s usando o modelo BERT com fine-tuning em dados do e-commerce brasileiro.

#### ü§ñ Modelo
Utiliza o modelo [BERT fine-tuned para an√°lise de sentimentos](https://huggingface.co/layers2024/bert-sentiment), treinado com o dataset [Olist Store](https://www.kaggle.com/datasets/olistbr/brazilian-ecommerce/data), um conjunto p√∫blico de mais de 100 mil avalia√ß√µes de e-commerce brasileiro feitas entre 2016 e 2018.

#### üéØ Projeto
Desenvolvido como parte do projeto NLP-Sentinel por [Luciano Ayres](https://linkedin.com/in/lucianoayres).

**Exemplos dispon√≠veis abaixo:**''',

    theme="default",
    allow_flagging=False,
    css="""
        .gradio-container {max-width: 800px; margin: auto;}
        .footer {display: none;}
        a {color: #2196F3; text-decoration: none;}
        a:hover {text-decoration: underline;}
        .examples {margin-top: 20px; text-align: left;}
        .examples-table {width: 100%; border-collapse: collapse;}
        .example-row {cursor: pointer; transition: background 0.2s;}
        .example-row:hover {background: #f0f0f0;}
        .textbox {text-align: left;}
    """
)

# Launch the Gradio app
if __name__ == "__main__":
    interface.launch(share=True)
